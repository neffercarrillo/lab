#+title: perlintro
#+author: Neffer Carrillo
#+date: 2024-06-18

* Running perl programs

- $ perl programname.pl
- shebang: #!/usr/bin/env perl
- recommended header for perl files:

  #+name: file header
  #+begin_src perl

    #!/usr/bin/perl
    use strict;
    use warnings;

  #+end_src

- end statements with a semicolon - ";"

  #+name: statement ending
  #+begin_src perl

  # my $x = 5;

  #+end_src
  
- comments start with a hash symbol - "#"

  #+name: comments
  #+begin_src perl

  # This is a comment in Perl.

  #+end_src
  
- whitespace is irrelevant
- double quotes or single quotes can be used around strings.
- double quotes interpolate variables and special characters.
- perl has three main variable types, scalars, arrays, and hashes.

* Scalars

- a scalar represents a single value
- can be strings, integers or floating point numbers
- you need to declare these with "my" keyword the first time you use them.

  #+name: perl my keyword example
  #+begin_src perl

    my $language = "Perl";
    print "$language\n";

  #+end_src 
  
- $_ is the default variable. it's used as the default argument to a number of functions.

  #+name: $_ example
  #+begin_src perl

    print; # prints contents of $_;

  #+end_src

* Arrays

- arrays represent lists of values.

  #+name: array exmaples
  #+begin_src perl

    my @languages = ("python","perl","raku");
    my @colors = ("blue","orange","green");
    my @mixed = ("hi",1,1.25);

  #+end_src

- arrays are zero-indexed.

  #+name: access array elements
  #+begin_src perl

    print $languages[0]; # remember to use the scalar sigil in order to access a single array item.
    print $colors[1];

  #+end_src

- the special variabale $#array tells you the index of the last element of an array

  #+name: access the last element of an array with special variable $#array
  #+begin_src perl

    print $mixed[$#mixed]; 

  #+end_src
  
- use an array where perl expects to find a salar value will give the number of items in an array.

  #+name: example - get the number of items in an array
  #+begin_src perl

    my $size_of_array = @languages; # this will set the value of $size_of_array to 3.

  #+end_src
  
- use the "@" sigil to get multiple items from an array. this is called getting an "array slice"

  #+name: example - get array slice
  #+begin_src perl

    @languages[0,1];
    @languages[0..2];
    @languages[1..$#languages]; 

  #+end_src

- @ARGV contains a script's command line arguments
- @_ contains the arguments passed to a subroutine

* Hashes

- key/value pairs
  
  #+name: hash example
  #+begin_src perl

    my %cars_to_owner_map = ("toyota","his","nissan","hers");
    my %tv_size = (
        vizio => "32in",
        samsung => "65in",
        );

  #+end_src
  
- get a single hash element by using the $ sigil

  #+name: example - get a value from the hash
  #+begin_src perl

    $cars_to_owner_map = {"toyota"};

  #+end_src

- you can get a list of all keys and all values by using the keys() and values() subroutines

  #+name: example - get values from a hash using a sub
  #+begin_src perl

    my @cars = keys %cars_to_owner_map;
    my @size = values %tv_size;

  #+end_src

- there are special hashes
- %ENV is a special hash which contains the environment variables

* References

- a scalar value that can refer to any other perl data type

* Variable Scoping

- use "my" before creating variables to limit the creation of global variables.

* Conditional and looping constructs

- 
